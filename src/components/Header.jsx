import React from "react";
import Modal from "react-modal";
import { Link } from "react-router-dom";
import Darkmode from "../darkmode";
import Input from "./Input";

export function Header() {
  const [modalIsOpen, setIsOpen] = React.useState(false);
  const [email, setLoginEmail] = React.useState("");
  const [password, setLoginPassword] = React.useState("");
  const [message, setLoginMessage] = React.useState("");
  const [uname, getLoginUser] = React.useState("");
  const [hideClass, setHideClass] = React.useState(true);
  const [password1, setNewPassword] = React.useState("");
  const [password2, confirmNewPassword] = React.useState("");
  const [signupSuccessful, setSignupSuccessful] = React.useState(false);
  const [loginSuccessful, setLoginSuccessful] = React.useState(false);
  const [signmessage, setSignUpMessage] = React.useState("");
  const [emailAdded, setSignUpEmail] = React.useState("");
  const [unameAdded, setSignUpUname] = React.useState("");
  
  

  const links = [
    { name: "About", href: "/about" },
    { name: "Contact", href: "/contact" },
    { name: "Download", href: "/download" },
    { name: "Blog", href: "/blog" },
  ];
  let ok = false;
  function openModal() {
    setIsOpen(true);
  }

  function closeModal() {
    setIsOpen(false);
    setLoginMessage('');
    setSignUpMessage('');
  }

  const handleLogin = async () => {
    try {
      const res = await fetch("/src/assets/users.json");
      const users = await res.json();
      //console.log(users);
      const user = users.find(
        (u) => u.email === email && u.password === password
      );
      if (user) {
        setLoginMessage(`Welcome, ${user.name}!`);
        setLoginSuccessful(true);
        getLoginUser(user.name);
      } else {
        setLoginMessage("Invalid login credentials");
        setLoginSuccessful(false);
      }
    } catch (err) {
      setLoginMessage("Login Failed");
      setLoginSuccessful(false);
      console.error(err);
    }
  };
  function validEmail(em) {
    if (em != "") return true;
    else return false;
  }

  const handleSignup = async () => {
    if (
      validEmail(emailAdded) != true ||
      unameAdded === "" ||
      password1 === "" ||
      password2 === ""
    ) {
      setSignUpMessage("Information missing");
      setSignupSuccessful(false);
    } else {
      if (password1 != password2) {
        setSignUpMessage("Passwords don't match");
        setSignupSuccessful(false);
      } else {
        setSignUpMessage("Sign Up succeded");
        setSignupSuccessful(true);
        getLoginUser(unameAdded);
      }
    }
  };
  const customStyles = {
    content: {
      left: "30%",
      right: "30%",
    },
    overlay: {
      backgroundColor: "#505050ca",
    },
  };
  return (
    <nav className="header">
      <div className="logo">
        <Link to="/">
          <svg
            viewBox="0 0 1470 493"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <g clip-path="url(#clip0_1_8)">
              <path
                d="M359.206 50.6862L353.041 56.892V50.6862H322.669C308.975 71.9437 280.065 86.6376 246.5 86.6376C212.947 86.6376 184.037 71.9437 170.343 50.6862H139.971V56.892L133.793 50.6862L24.5626 160.477L84.3116 220.548L139.971 164.61V444.325H353.016V164.623L408.688 220.561L468.425 160.477L359.206 50.6862Z"
                fill="#000000ff"
              />
              <path
                d="M353.017 469H139.971C126.412 469 115.408 457.946 115.408 444.325V224.2L101.678 237.994C97.0722 242.632 90.8209 245.223 84.2995 245.223C77.7904 245.223 71.5268 242.62 66.9213 237.994L7.17229 177.922C-2.4072 168.287 -2.4072 152.68 7.17229 143.032L116.428 33.2411C121.758 27.8743 129.458 25.2711 136.876 26.2088C137.896 26.0854 138.927 26.0114 139.971 26.0114H170.343C178.67 26.0114 186.444 30.2554 190.963 37.2754C200.629 52.2778 222.428 61.9627 246.5 61.9627C270.572 61.9627 292.383 52.2778 302.049 37.2754C306.568 30.2554 314.33 26.0114 322.669 26.0114H353.041C354.085 26.0114 355.117 26.073 356.136 26.2088C357.143 26.0854 358.162 26.0114 359.194 26.0114C365.703 26.0114 371.967 28.6146 376.585 33.2411L485.815 143.02C495.395 152.655 495.395 168.262 485.815 177.91L426.079 237.994C421.473 242.62 415.222 245.223 408.713 245.223C402.204 245.236 395.94 242.632 391.335 238.006L377.592 224.188V444.325C377.579 457.958 366.588 469 353.017 469ZM164.534 419.65H328.454V164.623C328.454 154.642 334.435 145.648 343.609 141.823C352.796 137.986 363.345 140.108 370.382 147.178L408.676 185.646L433.705 160.477L355.117 81.4806C351.199 81.8383 347.343 81.2215 343.646 79.6916C341.079 78.6306 338.758 77.1501 336.744 75.3612H334.631C314.355 97.8153 281.858 111.313 246.5 111.313C211.142 111.313 178.658 97.8153 158.369 75.3612H156.256C154.254 77.1501 151.933 78.6183 149.366 79.6916C145.645 81.2338 141.69 81.7767 137.871 81.4806L59.27 160.49L84.2995 185.658L122.581 147.178C129.606 140.108 140.168 137.998 149.354 141.823C158.541 145.648 164.522 154.642 164.522 164.623V419.65H164.534Z"
                fill="#000000ff"
              />
            </g>
            <path
              d="M678.572 125.364H643.923C643.678 122.497 643.022 119.896 641.957 117.561C640.933 115.227 639.5 113.22 637.657 111.541C635.855 109.821 633.664 108.51 631.083 107.609C628.503 106.667 625.575 106.196 622.298 106.196C616.564 106.196 611.711 107.589 607.738 110.374C603.806 113.159 600.817 117.152 598.769 122.353C596.762 127.555 595.759 133.801 595.759 141.091C595.759 148.791 596.782 155.241 598.83 160.443C600.919 165.603 603.929 169.494 607.861 172.115C611.793 174.696 616.523 175.986 622.053 175.986C625.206 175.986 628.032 175.597 630.531 174.819C633.029 173.999 635.2 172.832 637.043 171.317C638.886 169.801 640.381 167.979 641.527 165.849C642.715 163.678 643.514 161.241 643.923 158.538L678.572 158.784C678.163 164.108 676.668 169.535 674.088 175.064C671.507 180.552 667.842 185.631 663.091 190.3C658.381 194.928 652.545 198.655 645.582 201.481C638.619 204.307 630.531 205.72 621.315 205.72C609.766 205.72 599.404 203.242 590.229 198.287C581.096 193.331 573.867 186.041 568.543 176.416C563.26 166.791 560.618 155.016 560.618 141.091C560.618 127.084 563.321 115.288 568.727 105.705C574.134 96.0798 581.424 88.81 590.598 83.8952C599.772 78.9395 610.011 76.4616 621.315 76.4616C629.261 76.4616 636.572 77.547 643.248 79.7177C649.923 81.8884 655.78 85.0625 660.818 89.2401C665.855 93.3767 669.91 98.4757 672.982 104.537C676.054 110.599 677.917 117.541 678.572 125.364ZM688.909 78.1818H726.998L751.572 129.295H752.555L777.129 78.1818H815.218L769.02 164.436V204H735.108V164.436L688.909 78.1818ZM826.354 204V78.1818H880.907C890.491 78.1818 898.539 79.4719 905.051 82.0522C911.604 84.6325 916.54 88.2776 919.857 92.9876C923.216 97.6976 924.895 103.247 924.895 109.636C924.895 114.264 923.871 118.483 921.823 122.292C919.816 126.101 916.99 129.295 913.345 131.876C909.7 134.415 905.44 136.176 900.567 137.159V138.388C905.973 138.593 910.888 139.965 915.311 142.504C919.734 145.002 923.256 148.463 925.878 152.886C928.499 157.269 929.809 162.429 929.809 168.368C929.809 175.249 928.007 181.372 924.403 186.737C920.84 192.102 915.761 196.321 909.167 199.392C902.573 202.464 894.71 204 885.577 204H826.354ZM860.511 176.723H876.484C882.218 176.723 886.519 175.658 889.385 173.528C892.252 171.358 893.686 168.163 893.686 163.945C893.686 160.996 893.01 158.497 891.659 156.45C890.307 154.402 888.382 152.845 885.884 151.781C883.426 150.716 880.457 150.183 876.976 150.183H860.511V176.723ZM860.511 129.05H874.518C877.508 129.05 880.15 128.579 882.443 127.637C884.737 126.695 886.519 125.343 887.788 123.582C889.099 121.78 889.754 119.589 889.754 117.009C889.754 113.118 888.362 110.148 885.577 108.1C882.791 106.012 879.269 104.967 875.01 104.967H860.511V129.05ZM941.912 204V78.1818H1032.59V105.705H976.07V127.33H1027.92V154.852H976.07V176.477H1032.34V204H941.912ZM1049.53 204V78.1818H1103.84C1113.18 78.1818 1121.35 79.8815 1128.35 83.2809C1135.35 86.6803 1140.8 91.5746 1144.69 97.9638C1148.58 104.353 1150.53 112.012 1150.53 120.94C1150.53 129.951 1148.52 137.548 1144.51 143.733C1140.54 149.917 1134.94 154.586 1127.74 157.74C1120.57 160.893 1112.19 162.47 1102.61 162.47H1070.17V135.93H1095.73C1099.74 135.93 1103.16 135.439 1105.99 134.456C1108.86 133.432 1111.05 131.814 1112.56 129.603C1114.12 127.391 1114.9 124.504 1114.9 120.94C1114.9 117.336 1114.12 114.408 1112.56 112.155C1111.05 109.862 1108.86 108.182 1105.99 107.118C1103.16 106.012 1099.74 105.459 1095.73 105.459H1083.69V204H1049.53ZM1123.25 146.251L1154.71 204H1117.6L1086.88 146.251H1123.25ZM678.572 334.364H643.923C643.678 331.497 643.022 328.896 641.957 326.561C640.933 324.227 639.5 322.22 637.657 320.541C635.855 318.821 633.664 317.51 631.083 316.609C628.503 315.667 625.575 315.196 622.298 315.196C616.564 315.196 611.711 316.589 607.738 319.374C603.806 322.159 600.817 326.152 598.769 331.353C596.762 336.555 595.759 342.801 595.759 350.091C595.759 357.791 596.782 364.241 598.83 369.443C600.919 374.603 603.929 378.494 607.861 381.115C611.793 383.696 616.523 384.986 622.053 384.986C625.206 384.986 628.032 384.597 630.531 383.819C633.029 382.999 635.2 381.832 637.043 380.317C638.886 378.801 640.381 376.979 641.527 374.849C642.715 372.678 643.514 370.241 643.923 367.538L678.572 367.784C678.163 373.108 676.668 378.535 674.088 384.064C671.507 389.552 667.842 394.631 663.091 399.3C658.381 403.928 652.545 407.655 645.582 410.481C638.619 413.307 630.531 414.72 621.315 414.72C609.766 414.72 599.404 412.242 590.229 407.287C581.096 402.331 573.867 395.041 568.543 385.416C563.26 375.791 560.618 364.016 560.618 350.091C560.618 336.084 563.321 324.288 568.727 314.705C574.134 305.08 581.424 297.81 590.598 292.895C599.772 287.94 610.011 285.462 621.315 285.462C629.261 285.462 636.572 286.547 643.248 288.718C649.923 290.888 655.78 294.062 660.818 298.24C665.855 302.377 669.91 307.476 672.982 313.537C676.054 319.599 677.917 326.541 678.572 334.364ZM694.069 413V287.182H728.227V385.477H779.095V413H694.069ZM909.889 350.091C909.889 364.098 907.166 375.914 901.718 385.539C896.271 395.123 888.92 402.392 879.663 407.348C870.407 412.263 860.086 414.72 848.7 414.72C837.233 414.72 826.871 412.242 817.614 407.287C808.399 402.29 801.068 395 795.621 385.416C790.215 375.791 787.511 364.016 787.511 350.091C787.511 336.084 790.215 324.288 795.621 314.705C801.068 305.08 808.399 297.81 817.614 292.895C826.871 287.94 837.233 285.462 848.7 285.462C860.086 285.462 870.407 287.94 879.663 292.895C888.92 297.81 896.271 305.08 901.718 314.705C907.166 324.288 909.889 336.084 909.889 350.091ZM874.749 350.091C874.749 342.555 873.745 336.207 871.738 331.046C869.772 325.845 866.844 321.913 862.953 319.251C859.103 316.548 854.352 315.196 848.7 315.196C843.048 315.196 838.277 316.548 834.386 319.251C830.536 321.913 827.608 325.845 825.601 331.046C823.635 336.207 822.652 342.555 822.652 350.091C822.652 357.627 823.635 363.996 825.601 369.197C827.608 374.358 830.536 378.289 834.386 380.993C838.277 383.655 843.048 384.986 848.7 384.986C854.352 384.986 859.103 383.655 862.953 380.993C866.844 378.289 869.772 374.358 871.738 369.197C873.745 363.996 874.749 357.627 874.749 350.091ZM916.34 314.705V287.182H1025.69V314.705H987.85V413H954.184V314.705H916.34ZM1038.55 413V287.182H1072.71V336.33H1117.92V287.182H1152.08V413H1117.92V363.852H1072.71V413H1038.55ZM1202.46 287.182V413H1168.3V287.182H1202.46ZM1327.51 287.182V413H1299L1253.54 346.896H1252.8V413H1218.64V287.182H1247.64L1292.37 353.04H1293.35V287.182H1327.51ZM1425.37 328.712C1424.84 326.541 1424 324.636 1422.85 322.998C1421.71 321.319 1420.27 319.906 1418.55 318.759C1416.87 317.571 1414.91 316.691 1412.66 316.118C1410.44 315.503 1408.01 315.196 1405.34 315.196C1399.61 315.196 1394.72 316.568 1390.66 319.312C1386.65 322.056 1383.58 326.009 1381.45 331.169C1379.36 336.33 1378.31 342.555 1378.31 349.845C1378.31 357.217 1379.32 363.525 1381.32 368.767C1383.33 374.009 1386.32 378.023 1390.29 380.808C1394.27 383.593 1399.2 384.986 1405.1 384.986C1410.3 384.986 1414.62 384.228 1418.06 382.713C1421.54 381.197 1424.14 379.047 1425.86 376.262C1427.58 373.477 1428.44 370.201 1428.44 366.433L1434.34 367.047H1405.59V342.719H1461.37V360.166C1461.37 371.634 1458.94 381.443 1454.06 389.593C1449.23 397.703 1442.55 403.928 1434.03 408.27C1425.56 412.57 1415.83 414.72 1404.85 414.72C1392.61 414.72 1381.86 412.119 1372.6 406.918C1363.34 401.717 1356.11 394.303 1350.91 384.679C1345.75 375.054 1343.17 363.607 1343.17 350.337C1343.17 339.934 1344.75 330.719 1347.9 322.691C1351.1 314.664 1355.52 307.885 1361.17 302.356C1366.82 296.786 1373.36 292.588 1380.77 289.762C1388.18 286.895 1396.13 285.462 1404.61 285.462C1412.06 285.462 1418.98 286.527 1425.37 288.656C1431.8 290.745 1437.47 293.735 1442.39 297.626C1447.35 301.476 1451.34 306.042 1454.37 311.326C1457.4 316.609 1459.24 322.404 1459.9 328.712H1425.37Z"
              fill="white"
            />
            <defs>
              <clipPath id="clip0_1_8">
                <rect width="493" height="493" fill="white" />
              </clipPath>
            </defs>
          </svg>
        </Link>
      </div>
      <ul className="header-links">
        {links.map((link) => (
          <li key={link.name}>
            <Link to={link.href}>{link.name}</Link>
          </li>
        ))}
      </ul>

      <div className="header-icons">
        <Link className="checkout-button" to="/Checkout">
          <svg
            className="checkout-button"
            width="800px"
            height="800px"
            viewBox="0 0 52 52"
            data-name="Layer 1"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M38.67,27.35A11.33,11.33,0,1,1,27.35,38.67h0A11.34,11.34,0,0,1,38.67,27.35ZM20.36,37.63a4,4,0,1,1-4,4v0A4,4,0,0,1,20.36,37.63ZM42.8,34.07l-6.06,6.79L34,38.09a.79.79,0,0,0-1.11,0l0,0-1.11,1.07a.7.7,0,0,0-.07,1l.07.08L35.6,44a1.62,1.62,0,0,0,1.14.48A1.47,1.47,0,0,0,37.87,44l7.19-7.87a.83.83,0,0,0,0-1l-1.12-1.05a.79.79,0,0,0-1.11,0ZM8.2,2a2.42,2.42,0,0,1,2.25,1.7h0l.62,2.16H46.36A1.5,1.5,0,0,1,47.9,7.31a1.24,1.24,0,0,1-.06.47h0L43.66,22.43a1.42,1.42,0,0,1-.52.82,16.42,16.42,0,0,0-4.47-.64,16,16,0,0,0-5.47,1H19.36a2.2,2.2,0,0,0-2.22,2.18,2.11,2.11,0,0,0,.13.75h0v.08a2.26,2.26,0,0,0,2.17,1.62h7.1a16,16,0,0,0-2.77,4.61H16a2.32,2.32,0,0,1-2.25-1.7h0L6.5,6.62H4.33A2.37,2.37,0,0,1,2,4.22V4.16A2.46,2.46,0,0,1,4.48,2H8.2Z" />
          </svg>
        </Link>

        <div>
          <Darkmode></Darkmode>
        </div>
        <div className="modal">
          <div className="username-wrapper">
            <p className="username">{uname}</p>
          </div>
          <Modal
            isOpen={modalIsOpen}
            onRequestClose={closeModal}
            contentLabel="Example Modal"
            style={customStyles}
          >
            <button className="closeM" onClick={closeModal}>
              &times;
            </button>
            <div className={`log ${hideClass ? "" : "d-none"}`}>
              <h2 className="log-title">LOGIN</h2>
              <p className="log-p">Please insert your username:</p>
              <form>
                <Input
                  label="Email"
                  id="email"
                  type="email"
                  placeholder="Please input your email"
                  onChangeFn={(data) => setLoginEmail(data)}
                />
                <br></br>
                <Input
                  label="Password"
                  id="password"
                  type="password"
                  placeholder="Please input your password"
                  onChangeFn={(data) => setLoginPassword(data)}
                />
              </form>
              <br></br>
              <button className={`modal-buttons`} onClick={handleLogin}>
                Login
              </button>
              {message && (
                <h4 className={loginSuccessful ? "good-mes" : "bad-mes"}>
                  {message}
                </h4>
              )}
              <button
                className={`bottom-buttons modal-buttons`}
                onClick={() => setHideClass(false)}
              >
                Sign Up
              </button>
            </div>
            {/*--------------------------------------------------------------*/}
            <div className={`log ${hideClass ? "d-none" : ""}`}>
              <h2 className="log-title">SIGN UP</h2>
              <p className="log-p">Start creating your account:</p>
              <form>
                <Input
                  label='Email'
                  id="signup-email"
                  type="email"
                  placeholder="Please input your email"
                  onChangeFn={(data) => setSignUpEmail(data)}
                />
                <Input
                  label='User Name'
                  id="user-name"
                  type="text"
                  placeholder="set Username"
                  onChangeFn={(data) => setSignUpUname(data)}
                />
                <Input
                  label="Password"
                  id="signup-password"
                  type="password"
                  placeholder="Create password"
                  onChangeFn={(data) => setNewPassword(data)}
                />
                <Input
                  label="Confirm"
                  id="confirm-password"
                  type="password"
                  placeholder="Confirm password"
                  onChangeFn={(data) => confirmNewPassword(data)}
                />
              </form>
              
              <button
                className={`modal-buttons`}
                onClick={handleSignup}
                style={{ marginTop: "20px" }}
              >
                Sign up
              </button>
              {signmessage && (
                <h4 className={signupSuccessful ? "good-mes" : "bad-mes"}>
                  {signmessage}
                </h4>
              )}
              <button
                className={`bottom-buttons modal-buttons`}
                onClick={() => setHideClass(true)}
              >
                Login
              </button>
            </div>
          </Modal>
        </div>
        <Link className="login-button" onClick={openModal}>
          {" "}
          <svg
            className="login-button"
            xmlns="http://www.w3.org/2000/svg"
            width="800px"
            height="800px"
            viewBox="0 0 52 52"
            fill="none"
          >
            <path d="M13 2C10.2386 2 8 4.23858 8 7C8 7.55228 8.44772 8 9 8C9.55228 8 10 7.55228 10 7C10 5.34315 11.3431 4 13 4H17C18.6569 4 20 5.34315 20 7V17C20 18.6569 18.6569 20 17 20H13C11.3431 20 10 18.6569 10 17C10 16.4477 9.55228 16 9 16C8.44772 16 8 16.4477 8 17C8 19.7614 10.2386 22 13 22H17C19.7614 22 22 19.7614 22 17V7C22 4.23858 19.7614 2 17 2H13Z" />
            <path d="M3 11C2.44772 11 2 11.4477 2 12C2 12.5523 2.44772 13 3 13H11.2821C11.1931 13.1098 11.1078 13.2163 11.0271 13.318C10.7816 13.6277 10.5738 13.8996 10.427 14.0945C10.3536 14.1921 10.2952 14.2705 10.255 14.3251L10.2084 14.3884L10.1959 14.4055L10.1915 14.4115C10.1914 14.4116 10.191 14.4122 11 15L10.1915 14.4115C9.86687 14.8583 9.96541 15.4844 10.4122 15.809C10.859 16.1336 11.4843 16.0346 11.809 15.5879L11.8118 15.584L11.822 15.57L11.8638 15.5132C11.9007 15.4632 11.9553 15.3897 12.0247 15.2975C12.1637 15.113 12.3612 14.8546 12.5942 14.5606C13.0655 13.9663 13.6623 13.2519 14.2071 12.7071L14.9142 12L14.2071 11.2929C13.6623 10.7481 13.0655 10.0337 12.5942 9.43937C12.3612 9.14542 12.1637 8.88702 12.0247 8.7025C11.9553 8.61033 11.9007 8.53682 11.8638 8.48679L11.822 8.43002L11.8118 8.41602L11.8095 8.41281C11.4848 7.96606 10.859 7.86637 10.4122 8.19098C9.96541 8.51561 9.86636 9.14098 10.191 9.58778L11 9C10.191 9.58778 10.1909 9.58773 10.191 9.58778L10.1925 9.58985L10.1959 9.59454L10.2084 9.61162L10.255 9.67492C10.2952 9.72946 10.3536 9.80795 10.427 9.90549C10.5738 10.1004 10.7816 10.3723 11.0271 10.682C11.1078 10.7837 11.1931 10.8902 11.2821 11H3Z" />
          </svg>
        </Link>
      </div>
    </nav>
  );
}


